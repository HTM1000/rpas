# -*- coding: utf-8 -*-
"""
Script helper para ativar/desativar MODO_TESTE no RPA_Oracle.py
Execute este script antes de gerar o execut√°vel para testar
"""

import os

def alternar_modo_teste():
    arquivo = "RPA_Oracle.py"

    if not os.path.exists(arquivo):
        print(f"‚ùå Arquivo {arquivo} n√£o encontrado!")
        return

    with open(arquivo, 'r', encoding='utf-8') as f:
        conteudo = f.read()

    # Verificar estado atual
    if "MODO_TESTE = False" in conteudo:
        novo_conteudo = conteudo.replace("MODO_TESTE = False", "MODO_TESTE = True")
        novo_estado = "ATIVADO"
    elif "MODO_TESTE = True" in conteudo:
        novo_conteudo = conteudo.replace("MODO_TESTE = True", "MODO_TESTE = False")
        novo_estado = "DESATIVADO"
    else:
        print("‚ùå N√£o foi poss√≠vel encontrar a vari√°vel MODO_TESTE no arquivo!")
        return

    # Salvar altera√ß√£o
    with open(arquivo, 'w', encoding='utf-8') as f:
        f.write(novo_conteudo)

    print(f"‚úÖ MODO_TESTE foi {novo_estado} com sucesso!")
    print(f"\nüìù Agora voc√™ pode:")
    if novo_estado == "ATIVADO":
        print("   1. Executar o RPA_Oracle.py diretamente (python RPA_Oracle.py)")
        print("   2. Ou gerar o execut√°vel (python -m PyInstaller RPA_Oracle.spec --noconfirm)")
        print("\n‚ö†Ô∏è  No modo teste, o rob√¥ N√ÉO preencher√° o Oracle, apenas testar√° a l√≥gica!")
    else:
        print("   1. Gerar o execut√°vel para produ√ß√£o (python -m PyInstaller RPA_Oracle.spec --noconfirm)")
        print("\n‚úÖ Modo produ√ß√£o: o rob√¥ preencher√° normalmente no Oracle")

if __name__ == "__main__":
    alternar_modo_teste()
