# -*- coding: utf-8 -*-
"""
RPA CICLO - M√≥dulo Principal (Vers√£o para GUI)
Orquestra a execu√ß√£o sequencial de processos no Oracle
"""

import json
import os
import sys
import time
import threading
import hashlib
from pathlib import Path
from datetime import datetime
import pyautogui
import re
from io import StringIO

# Configurar encoding UTF-8 para o console Windows
if sys.platform.startswith('win'):
    try:
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
    except:
        pass

# Importar pandas
try:
    import pandas as pd
    PANDAS_DISPONIVEL = True
except ImportError:
    PANDAS_DISPONIVEL = False
    print("[WARN] pandas n√£o dispon√≠vel - processamento de bancada desabilitado")

# Importar pytesseract para OCR (verifica√ß√£o visual)
try:
    import pytesseract
    from PIL import Image, ImageGrab
    PYTESSERACT_DISPONIVEL = True

    # Configurar caminho do tesseract (para .exe standalone OU desenvolvimento)
    tesseract_configurado = False

    # 1. PRIORIDADE: Tesseract na pasta local (junto com o .exe ou script)
    if getattr(sys, 'frozen', False):
        # Execut√°vel PyInstaller: pode estar em tesseract/ ou _internal/tesseract/
        base_dir = os.path.dirname(sys.executable)

        # Tentar primeiro em _internal/tesseract/ (PyInstaller modo onedir)
        local_tesseract = os.path.join(base_dir, '_internal', 'tesseract', 'tesseract.exe')
        if not os.path.exists(local_tesseract):
            # Fallback: tentar em tesseract/ direto
            local_tesseract = os.path.join(base_dir, 'tesseract', 'tesseract.exe')
    else:
        # Desenvolvimento: procurar na pasta do script
        local_tesseract = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'tesseract', 'tesseract.exe')

    if os.path.exists(local_tesseract):
        pytesseract.pytesseract.tesseract_cmd = local_tesseract
        print(f"[OK] Tesseract LOCAL encontrado: {local_tesseract}")
        tesseract_configurado = True

    # 2. Fallback: Tesseract instalado no sistema
    if not tesseract_configurado:
        # Tentar localiza√ß√£o padr√£o do instalador
        default_path = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
        if os.path.exists(default_path):
            pytesseract.pytesseract.tesseract_cmd = default_path
            print(f"[OK] Tesseract SISTEMA encontrado: {default_path}")
            tesseract_configurado = True
        else:
            # Tentar localizar no PATH
            import shutil
            tesseract_cmd = shutil.which('tesseract')
            if tesseract_cmd:
                pytesseract.pytesseract.tesseract_cmd = tesseract_cmd
                print(f"[OK] Tesseract PATH encontrado: {tesseract_cmd}")
                tesseract_configurado = True

    if not tesseract_configurado:
        print("[WARN] Tesseract-OCR n√£o encontrado!")
        print("[WARN] OCR n√£o funcionar√°. Copie a pasta 'tesseract' para junto do execut√°vel.")
        PYTESSERACT_DISPONIVEL = False
    else:
        print("[OK] pytesseract configurado com sucesso")

except ImportError as e:
    PYTESSERACT_DISPONIVEL = False
    print(f"[WARN] pytesseract n√£o dispon√≠vel: {e}")
    print("[WARN] Verifica√ß√£o visual por OCR desabilitada")

# Importar m√≥dulo Google Sheets (para ciclo)
try:
    from google_sheets_ciclo import registrar_ciclo, atualizar_ciclo
    GOOGLE_SHEETS_DISPONIVEL = True
except ImportError:
    GOOGLE_SHEETS_DISPONIVEL = False
    print("‚ö†Ô∏è Google Sheets (ciclo) n√£o dispon√≠vel")

# Importar m√≥dulo Google Sheets (para bancada)
try:
    from google_sheets_manager import enviar_para_google_sheets
    GOOGLE_SHEETS_BANCADA_DISPONIVEL = True
    print("[OK] Google Sheets (bancada) importado com sucesso")
except ImportError as e:
    GOOGLE_SHEETS_BANCADA_DISPONIVEL = False
    print(f"[WARN] Google Sheets (bancada) n√£o dispon√≠vel: {e}")

# =================== CONFIGURA√á√ïES GLOBAIS ===================
BASE_DIR = Path(__file__).parent.resolve() if not getattr(sys, 'frozen', False) else Path(sys.executable).parent
CONFIG_FILE = BASE_DIR / "config.json"

# Compatibilidade com .exe
base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))

# ‚îÄ‚îÄ‚îÄ CONFIGURA√á√ïES DE MODO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# IMPORTANTE: Altere para True para testes, False para PRODU√á√ÉO
MODO_TESTE = False  # True = simula movimentos sem pyautogui | False = PRODU√á√ÉO
PARAR_QUANDO_VAZIO = True  # Para quando vazio (TESTE)
SIMULAR_FALHA_SHEETS = False  # True = for√ßa falhas para testar retry | False = PRODU√á√ÉO
LIMITE_ITENS_TESTE = 50  # Limite de itens por ciclo no modo teste
SEM_CTRL_S = True  # NAO executa Ctrl+S (TESTE)

# Controle de execu√ß√£o
_rpa_running = False
_gui_log_callback = None
_ciclo_atual = 0
_data_inicio_ciclo = None
_dados_inseridos_oracle = False  # Rastreia se dados foram inseridos no Oracle neste ciclo

# ‚îÄ‚îÄ‚îÄ CACHE LOCAL ANTI-DUPLICA√á√ÉO (IGUAL AO RPA_ORACLE) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class CacheLocal:
    """Cache persistente para evitar duplica√ß√µes no Oracle"""

    def __init__(self, arquivo="cache_teste_ciclo.json"):
        # Usar data_path (diret√≥rio do execut√°vel) igual ao RPA_Oracle
        data_path = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else os.path.dirname(os.path.abspath(__file__))
        self.arquivo = os.path.join(data_path, arquivo)
        self.dados = self._carregar()
        self.lock = threading.Lock()
        # Criar arquivo vazio se n√£o existir
        if not os.path.exists(self.arquivo) and not self.dados:
            self._salvar()

    def _carregar(self):
        """Carrega cache do disco (persiste entre execu√ß√µes)"""
        if os.path.exists(self.arquivo):
            try:
                with open(self.arquivo, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                gui_log(f"Erro ao carregar cache: {e}")
                return {}
        return {}

    def _salvar(self):
        """Salva cache no disco SEM lock para evitar deadlock (igual RPA_Oracle)"""
        try:
            # Converter dados para JSON string primeiro (para detectar erros de serializa√ß√£o)
            json_str = json.dumps(self.dados, indent=2, ensure_ascii=False)

            # Salvar em arquivo tempor√°rio primeiro
            temp_arquivo = self.arquivo + ".tmp"
            with open(temp_arquivo, 'w', encoding='utf-8') as f:
                f.write(json_str)
                f.flush()
                os.fsync(f.fileno())  # Garantir que foi escrito no disco

            # Substituir arquivo original pelo tempor√°rio
            if os.path.exists(self.arquivo):
                os.replace(temp_arquivo, self.arquivo)
            else:
                os.rename(temp_arquivo, self.arquivo)

        except Exception as e:
            gui_log(f"[ERRO] Falha ao salvar cache: {e}")
            # Tentar limpar arquivo tempor√°rio se existir
            try:
                temp_arquivo = self.arquivo + ".tmp"
                if os.path.exists(temp_arquivo):
                    os.remove(temp_arquivo)
            except:
                pass

    def ja_processado(self, id_item):
        """Verifica se ID j√° foi processado"""
        with self.lock:
            return id_item in self.dados

    def adicionar(self, id_item, linha_atual, item, quantidade, referencia, status="pendente"):
        """Adiciona ao cache AP√ìS Ctrl+S (status pendente)"""
        # VALIDA√á√ÉO: n√£o permitir IDs vazios no cache
        if not id_item or str(id_item).strip() == "":
            gui_log(f"[ERRO CACHE] Tentativa de adicionar ID vazio ao cache! Linha: {linha_atual}, Item: {item}")
            return False

        # Preparar dados antes do lock
        dados_item = {
            "linha_atual": linha_atual,
            "item": item,
            "quantidade": quantidade,
            "referencia": referencia,
            "timestamp_processamento": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status_sheets": status
        }

        # Adicionar aos dados com lock
        with self.lock:
            self.dados[id_item] = dados_item

        # Salvar sem lock para evitar deadlock
        self._salvar()
        return True

    def marcar_concluido(self, id_item):
        """Remove do cache quando Sheets for atualizado com sucesso (igual RPA_Oracle)"""
        # Verificar e remover com lock
        removido = False
        with self.lock:
            if id_item in self.dados:
                del self.dados[id_item]
                removido = True

        # Salvar sem lock para evitar deadlock
        if removido:
            self._salvar()

        return removido

    def get_pendentes(self):
        """Retorna lista de Data Hora Sep. pendentes para retry"""
        with self.lock:
            return [
                data_hora for data_hora, dados in self.dados.items()
                if dados.get("status_sheets") == "pendente"
            ]

# =================== CALLBACKS PARA GUI ===================
def set_gui_log_callback(callback):
    """Define callback para enviar logs para a GUI"""
    global _gui_log_callback
    _gui_log_callback = callback

def gui_log(msg):
    """Envia log para GUI se callback estiver definido"""
    if _gui_log_callback:
        _gui_log_callback(msg)
    else:
        print(msg)

def stop_rpa():
    """Para o RPA externamente (para ser chamado pela GUI)"""
    global _rpa_running
    _rpa_running = False
    gui_log("üõë Solicita√ß√£o de parada recebida")

def is_rpa_running():
    """Verifica se RPA est√° rodando"""
    return _rpa_running

# =================== CARREGAMENTO DE CONFIGURA√á√ÉO ===================
def carregar_config():
    """Carrega as configura√ß√µes do arquivo config.json"""
    try:
        config_path = os.path.join(base_path, "config.json")
        if not os.path.exists(config_path):
            config_path = CONFIG_FILE

        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        gui_log("‚úÖ Configura√ß√µes carregadas")
        return config
    except FileNotFoundError:
        gui_log(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {CONFIG_FILE}")
        raise
    except json.JSONDecodeError as e:
        gui_log(f"‚ùå Erro ao decodificar JSON: {e}")
        raise

# =================== FUN√á√ïES AUXILIARES ===================
def indice_para_coluna(idx):
    """Converte √≠ndice num√©rico (0-based) para letra de coluna do Google Sheets
    0 -> A, 1 -> B, 25 -> Z, 26 -> AA, 27 -> AB, 28 -> AC, etc.
    """
    resultado = ""
    idx += 1  # Google Sheets √© 1-based
    while idx > 0:
        idx -= 1
        resultado = chr(65 + (idx % 26)) + resultado
        idx //= 26
    return resultado

def verificar_campo_ocr(x, y, largura, altura, valor_esperado, nome_campo="Campo", salvar_debug=False):
    """
    Captura regi√£o da tela e usa OCR para verificar se o valor est√° correto.

    Args:
        x, y: Coordenadas do canto superior esquerdo do campo
        largura, altura: Dimens√µes da regi√£o a capturar
        valor_esperado: Texto que deveria estar no campo
        nome_campo: Nome do campo para logs
        salvar_debug: Se True, salva screenshot para debug (apenas em modo teste)

    Returns:
        tuple: (sucesso: bool, texto_lido: str, confianca: float)
    """
    if not PYTESSERACT_DISPONIVEL:
        gui_log(f"‚ö†Ô∏è [OCR] pytesseract n√£o dispon√≠vel, pulando verifica√ß√£o de {nome_campo}")
        return (True, "", 0.0)  # Retorna sucesso se OCR n√£o estiver dispon√≠vel

    screenshot_path = None
    try:
        # Capturar regi√£o da tela
        screenshot = ImageGrab.grab(bbox=(x, y, x + largura, y + altura))

        # SEMPRE salvar screenshot em modo TESTE para debug
        if True:  # For√ßar salvamento para debug
            screenshot_path = f"debug_ocr_{nome_campo.replace('.', '_').replace(' ', '_')}.png"
            screenshot.save(screenshot_path)
            gui_log(f"[DEBUG] Screenshot salvo: {screenshot_path}")

        # Converter para escala de cinza e aumentar contraste
        from PIL import ImageEnhance
        screenshot = screenshot.convert('L')  # Escala de cinza
        enhancer = ImageEnhance.Contrast(screenshot)
        screenshot = enhancer.enhance(2.0)  # Aumentar contraste

        # Salvar imagem processada tamb√©m
        if True:
            processed_path = f"debug_ocr_{nome_campo.replace('.', '_').replace(' ', '_')}_processado.png"
            screenshot.save(processed_path)

        # Aplicar OCR com configura√ß√µes otimizadas
        # --psm 7: linha √∫nica de texto
        # --oem 3: usar LSTM + tradicional
        # -c tessedit_char_whitelist: apenas caracteres alfanum√©ricos
        texto_lido = pytesseract.image_to_string(screenshot, config='--psm 7 --oem 3').strip()

        # Normalizar textos para compara√ß√£o (remover espa√ßos, converter para mai√∫sculas)
        texto_lido_norm = texto_lido.replace(" ", "").upper()
        valor_esperado_norm = str(valor_esperado).replace(" ", "").upper()

        # Verificar similaridade
        if texto_lido_norm == valor_esperado_norm:
            gui_log(f"‚úÖ [OCR] {nome_campo}: '{texto_lido}' == '{valor_esperado}' (CORRETO)")
            return (True, texto_lido, 1.0)
        else:
            # Calcular similaridade parcial (porcentagem de caracteres corretos)
            if len(valor_esperado_norm) > 0:
                caracteres_corretos = sum(1 for a, b in zip(texto_lido_norm, valor_esperado_norm) if a == b)
                confianca = caracteres_corretos / len(valor_esperado_norm)
            else:
                confianca = 0.0

            gui_log(f"‚ö†Ô∏è [OCR] {nome_campo}: Esperado '{valor_esperado}', Lido '{texto_lido}' (Similaridade: {confianca*100:.1f}%)")

            # Se similaridade for > 80%, considera aceit√°vel (OCR pode ter pequenos erros)
            if confianca >= 0.8:
                gui_log(f"‚úÖ [OCR] {nome_campo}: Similaridade aceit√°vel ({confianca*100:.1f}% >= 80%)")
                return (True, texto_lido, confianca)
            else:
                return (False, texto_lido, confianca)

    except Exception as e:
        gui_log(f"‚ö†Ô∏è [OCR] Erro ao verificar {nome_campo}: {e}")
        return (True, "", 0.0)  # Em caso de erro, n√£o bloqueia o processamento

def validar_campos_oracle_ocr(coords, item, quantidade, referencia, sub_o, end_o, sub_d, end_d, salvar_debug=False):
    """
    Valida todos os campos do Oracle usando OCR com detec√ß√£o de headers.
    Captura imagem incluindo headers e valores, localiza headers e busca valores abaixo.

    Args:
        coords: Dicion√°rio com coordenadas dos campos (n√£o usado)
        item, quantidade, referencia, sub_o, end_o, sub_d, end_d: Valores esperados
        salvar_debug: Se True, salva screenshots

    Returns:
        bool: True se todos os campos est√£o corretos, False caso contr√°rio
    """
    if not PYTESSERACT_DISPONIVEL:
        gui_log("‚ö†Ô∏è [OCR] pytesseract n√£o dispon√≠vel, pulando valida√ß√£o visual")
        return True

    gui_log("üîç [OCR] Iniciando valida√ß√£o visual com detec√ß√£o de headers...")

    try:
        # COORDENADAS DA IMAGEM (headers + valores)
        X_INICIO = 67
        Y_INICIO = 105      # Subiu 35px para pegar headers
        LARGURA_TOTAL = 1236
        ALTURA_TOTAL = 70   # Dobrou: 35px headers + 35px valores

        # Capturar imagem grande
        screenshot = ImageGrab.grab(bbox=(X_INICIO, Y_INICIO, X_INICIO + LARGURA_TOTAL, Y_INICIO + ALTURA_TOTAL))
        screenshot.save("debug_ocr_TODOS_CAMPOS.png")
        gui_log("[DEBUG] Screenshot completo salvo: debug_ocr_TODOS_CAMPOS.png")

        # Processar imagem (escala de cinza + contraste)
        from PIL import ImageEnhance
        screenshot_processado = screenshot.convert('L')
        enhancer = ImageEnhance.Contrast(screenshot_processado)
        screenshot_processado = enhancer.enhance(2.0)
        screenshot_processado.save("debug_ocr_TODOS_CAMPOS_processado.png")

        # OCR com detec√ß√£o de posi√ß√£o (retorna X, Y, Width, Height de cada palavra)
        import pandas as pd
        ocr_data = pytesseract.image_to_data(screenshot_processado, config='--psm 6', output_type=pytesseract.Output.DICT)

        # Converter para DataFrame para facilitar an√°lise
        df_ocr = pd.DataFrame(ocr_data)
        df_ocr = df_ocr[df_ocr['conf'] != -1]  # Remover linhas vazias
        df_ocr['text'] = df_ocr['text'].str.strip()
        df_ocr = df_ocr[df_ocr['text'] != '']  # Remover textos vazios

        gui_log(f"[OCR] {len(df_ocr)} palavras detectadas")

        # Mapeamento: campo ‚Üí header no Oracle
        HEADERS_ORACLE = {
            "item": "Item",
            "quantidade": "Quantidade",
            "referencia": "Refer√™ncia",
            "sub_origem": "Subinvent.",
            "end_origem": "Endere√ßo",
            "sub_destino": "Para Subinv.",
            "end_destino": "Para Loc."
        }

        # Valores esperados (normalizar tudo)
        def normalizar_valor(val):
            """Remove espa√ßos, pontos, v√≠rgulas e converte para mai√∫sculas"""
            return str(val).upper().replace(" ", "").replace(",", ".").replace(".", "").strip()

        valores_esperados = {
            "item": str(item).upper().strip(),
            "quantidade": str(quantidade).strip(),  # Manter original para quantidade
            "referencia": str(referencia).upper().strip(),
            "sub_origem": str(sub_o).upper().strip(),
            "end_origem": str(end_o).upper().strip(),
        }

        # Se n√£o √© COD, adicionar destino
        if not str(referencia).strip().upper().startswith("COD"):
            valores_esperados["sub_destino"] = str(sub_d).upper().strip()
            valores_esperados["end_destino"] = str(end_d).upper().strip()

        # Fun√ß√£o auxiliar para busca flex√≠vel
        def encontrar_texto(df, texto_busca, tolerancia=0.8):
            """Busca texto com similaridade"""
            from difflib import SequenceMatcher
            texto_busca_norm = texto_busca.upper().replace(" ", "")

            for _, row in df.iterrows():
                texto_lido = str(row['text']).upper().replace(" ", "")
                # Similaridade exata ou parcial
                if texto_busca_norm in texto_lido or texto_lido in texto_busca_norm:
                    return row
                # Similaridade por ratio
                ratio = SequenceMatcher(None, texto_busca_norm, texto_lido).ratio()
                if ratio >= tolerancia:
                    return row
            return None

        # Validar cada campo usando headers como refer√™ncia
        erros = []
        for campo, valor_esperado in valores_esperados.items():
            header_oracle = HEADERS_ORACLE[campo]

            # Tentar encontrar o header
            header_row = encontrar_texto(df_ocr, header_oracle, tolerancia=0.7)

            if header_row is not None:
                # Header encontrado! Agora buscar valor na mesma coluna (X similar) mas Y abaixo
                header_x = header_row['left']
                header_y = header_row['top']
                header_width = header_row.get('width', 0)

                # Margem mais restrita para quantidade (¬±20px), outros campos (¬±30px)
                margem_x = 20 if campo == "quantidade" else 30

                # Procurar textos abaixo do header (Y maior, X pr√≥ximo)
                valores_abaixo = df_ocr[
                    (df_ocr['top'] > header_y) &
                    (df_ocr['left'].between(header_x - margem_x, header_x + margem_x))
                ]

                # Debug: mostrar o que foi encontrado abaixo do header
                if len(valores_abaixo) > 0:
                    textos_debug = [f"'{t}' (X:{x})" for t, x in zip(valores_abaixo['text'].tolist(), valores_abaixo['left'].tolist())]
                    gui_log(f"[DEBUG] Abaixo de '{header_oracle}' (X:{header_x}): {', '.join(textos_debug[:3])}")

                # Verificar se o valor esperado est√° nesses textos
                valor_encontrado = False
                for _, val_row in valores_abaixo.iterrows():
                    texto_lido = str(val_row['text']).upper().replace(" ", "")
                    valor_busca = valor_esperado.upper().replace(" ", "")
                    val_x = val_row['left']

                    # Para quantidade: valida√ß√£o EXATA (sem similaridade)
                    if campo == "quantidade":
                        texto_lido_norm = texto_lido.replace(",", "").replace(".", "")
                        valor_busca_norm = valor_busca.replace(",", "").replace(".", "")

                        # Compara√ß√£o EXATA de n√∫meros
                        if valor_busca_norm == texto_lido_norm:
                            gui_log(f"‚úÖ [OCR] {campo} ('{valor_esperado}'): encontrado como '{val_row['text']}' (X:{val_x})")
                            valor_encontrado = True
                            break
                    else:
                        # Compara√ß√£o flex√≠vel para outros campos
                        if valor_busca in texto_lido or texto_lido in valor_busca:
                            gui_log(f"‚úÖ [OCR] {campo} ('{valor_esperado}'): encontrado como '{val_row['text']}' (X:{val_x})")
                            valor_encontrado = True
                            break

                        # Similaridade apenas para campos de texto (n√£o quantidade)
                        from difflib import SequenceMatcher
                        ratio = SequenceMatcher(None, valor_busca, texto_lido).ratio()
                        if ratio >= 0.75:
                            gui_log(f"‚úÖ [OCR] {campo} ('{valor_esperado}'): similar a '{val_row['text']}' ({ratio*100:.0f}%) (X:{val_x})")
                            valor_encontrado = True
                            break

                if not valor_encontrado:
                    textos_encontrados = ", ".join([f"'{t}' (X:{x})" for t, x in zip(valores_abaixo['text'].tolist(), valores_abaixo['left'].tolist())])
                    gui_log(f"‚ùå [OCR] {campo}: esperado '{valor_esperado}', abaixo de '{header_oracle}' (X:{header_x}) encontrei: {textos_encontrados}")
                    erros.append(f"{campo} (esperado: {valor_esperado})")
            else:
                # Header n√£o encontrado, fazer busca geral na imagem (sem log)
                # Busca geral
                encontrado = encontrar_texto(df_ocr, valor_esperado, tolerancia=0.75)
                if encontrado is not None:
                    gui_log(f"‚úÖ [OCR] {campo}: '{valor_esperado}' encontrado")
                else:
                    gui_log(f"‚ùå [OCR] {campo}: '{valor_esperado}' N√ÉO encontrado")
                    erros.append(f"{campo} (esperado: {valor_esperado})")

        # Resultado final
        if erros:
            gui_log(f"‚ùå [OCR] Valida√ß√£o FALHOU. {len(erros)} campo(s) com problema:")
            for erro in erros:
                gui_log(f"   - {erro}")
            # Mostrar todo texto lido para debug
            todos_textos = " | ".join(df_ocr['text'].tolist())
            gui_log(f"[OCR] Todos textos lidos: {todos_textos}")
            return False
        else:
            gui_log("‚úÖ [OCR] Valida√ß√£o visual OK - Todos os campos validados!")
            return True

    except Exception as e:
        gui_log(f"‚ö†Ô∏è [OCR] Erro na valida√ß√£o: {e}")
        import traceback
        gui_log(traceback.format_exc())
        return True  # Em caso de erro, n√£o bloqueia

# =================== FUN√á√ïES DE AUTOMA√á√ÉO ===================
def clicar_coordenada(x, y, duplo=False, clique_pausa_duplo=False, descricao=""):
    """Clica em uma coordenada espec√≠fica na tela"""
    if descricao:
        gui_log(f"üñ±Ô∏è {descricao}")

    if MODO_TESTE:
        gui_log(f"[MODO TESTE] Simulando clique em ({x}, {y})")
        time.sleep(0.2)
        return

    pyautogui.moveTo(x, y, duration=0.8)
    time.sleep(0.5)

    if clique_pausa_duplo:
        # Bancada: click ‚Üí espera 2s ‚Üí doubleClick (igual voc√™ faz manualmente)
        pyautogui.click()
        gui_log("‚è≥ Aguardando 2s...")
        time.sleep(2.0)
        gui_log("üñ±Ô∏è Executando doubleClick()...")
        pyautogui.doubleClick()
    elif duplo:
        # Duplo clique nativo do pyautogui
        pyautogui.doubleClick()
    else:
        pyautogui.click()

    time.sleep(1.0)

def digitar_texto(texto, pressionar_teclas=None):
    """Digita um texto e opcionalmente pressiona teclas adicionais"""
    gui_log(f"‚å®Ô∏è Digitando: {texto}")

    if MODO_TESTE:
        gui_log(f"[MODO TESTE] Simulando digita√ß√£o de '{texto}'")
        if pressionar_teclas:
            gui_log(f"[MODO TESTE] Simulando teclas: {', '.join(pressionar_teclas)}")
        time.sleep(0.2)
        return

    pyautogui.write(texto)
    time.sleep(0.3)

    if pressionar_teclas:
        for tecla in pressionar_teclas:
            gui_log(f"‚å®Ô∏è Pressionando: {tecla.upper()}")
            pyautogui.press(tecla)
            time.sleep(0.3)

def aguardar_com_pausa(segundos, mensagem="Aguardando"):
    """Aguarda um tempo com possibilidade de interrup√ß√£o"""
    gui_log(f"‚è≥ {mensagem} ({segundos}s)...")
    inicio = time.time()
    while time.sleep(0.5) or time.time() - inicio < segundos:
        if not _rpa_running:
            return False
    return True

# =================== ETAPAS DO PROCESSO ===================
def etapa_01_transferencia_subinventario(config):
    """Etapa 1: Duplo clique em Transfer√™ncia de Subinvent√°rio"""
    gui_log("üìã ETAPA 1: Transfer√™ncia de Subinvent√°rio")

    coord = config["coordenadas"]["tela_01_transferencia_subinventario"]
    clicar_coordenada(coord["x"], coord["y"], duplo=True, descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    return aguardar_com_pausa(tempo_espera, "Aguardando abertura do modal")

def etapa_02_preencher_tipo(config):
    """Etapa 2: Preencher campo Tipo com SUB"""
    gui_log("üìã ETAPA 2: Preenchimento do Tipo")

    coord = config["coordenadas"]["tela_02_campo_tipo"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    time.sleep(0.5)
    digitar_texto(coord["digitar"], pressionar_teclas=coord["acoes"])

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando processamento")

def etapa_03_selecionar_funcionario(config):
    """Etapa 3: Selecionar funcion√°rio Wallatas Moreira usando setas"""
    gui_log("üìã ETAPA 3: Sele√ß√£o de Funcion√°rio")

    # Clicar na pastinha
    coord_pastinha = config["coordenadas"]["tela_03_pastinha_funcionario"]
    clicar_coordenada(coord_pastinha["x"], coord_pastinha["y"], descricao=coord_pastinha["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    if not aguardar_com_pausa(tempo_espera, "Aguardando modal de funcion√°rios"):
        return False

    # M√©todo 1: Navegar com setas para baixo (9x) + Enter
    gui_log("‚å®Ô∏è Navegando at√© Wallatas Moreira (9 setas para baixo)...")

    if MODO_TESTE:
        gui_log("[MODO TESTE] Simulando navega√ß√£o e sele√ß√£o de funcion√°rio")
        time.sleep(0.5)
    else:
        time.sleep(1.0)

        # Pressionar 9 vezes a seta para baixo
        for i in range(9):
            pyautogui.press('down')
            time.sleep(0.2)
            gui_log(f"   Seta {i+1}/9")

        time.sleep(0.5)

        # Pressionar Enter para selecionar
        gui_log("‚å®Ô∏è Pressionando Enter para selecionar Wallatas")
        pyautogui.press('enter')
        time.sleep(1.0)

        # Pressionar Enter novamente para confirmar o modal "Sim"
        gui_log("‚å®Ô∏è Pressionando Enter para confirmar (Sim)")
        pyautogui.press('enter')
        time.sleep(1.0)

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando confirma√ß√£o")

def etapa_05_executar_rpa_oracle(config, primeiro_ciclo=False):
    """Etapa 5: Processar linhas do Google Sheets no Oracle

    Args:
        config: Configura√ß√µes do RPA
        primeiro_ciclo: Se True, ap√≥s 2 tentativas sem itens, pula para Bancada
    """
    global _dados_inseridos_oracle
    _dados_inseridos_oracle = False  # Resetar flag no in√≠cio

    gui_log("ü§ñ ETAPA 5: Processamento no Oracle")

    try:
        # Importar Google Sheets
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from google_auth_oauthlib.flow import InstalledAppFlow
        from googleapiclient.discovery import build

        # Autenticar Google Sheets
        SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
        SPREADSHEET_ID = "147AN4Kn11T2qGyzTQgdqJ0QfSIt9TATEi0lw9zwMnpY"  # PLANILHA TESTE
        SHEET_NAME = "Separa√ß√£o"

        token_path = os.path.join(BASE_DIR, "token.json")
        creds_path = os.path.join(base_path, "CredenciaisOracle.json")

        creds = None
        if os.path.exists(token_path):
            creds = Credentials.from_authorized_user_file(token_path, SCOPES)
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(creds_path, SCOPES)
                creds = flow.run_local_server(port=0)
            with open(token_path, "w") as token:
                token.write(creds.to_json())

        service = build("sheets", "v4", credentials=creds)

        # Inicializar cache anti-duplica√ß√£o
        cache = CacheLocal()  # Usa "processados.json" por padr√£o
        gui_log(f"üíæ Cache carregado: {len(cache.dados)} itens processados anteriormente")
        gui_log(f"üìÇ Arquivo de cache: {cache.arquivo}")

        # Coordenadas dos campos no Oracle
        coords = {
            "item": (101, 156),
            "sub_origem": (257, 159),
            "end_origem": (335, 159),
            "sub_destino": (485, 159),
            "end_destino": (553, 159),
            "quantidade": (672, 159),
            "Referencia": (768, 159),
        }

        # Loop de espera at√© encontrar pelo menos 1 item para processar
        itens_processados = 0
        tentativas_verificacao = 0
        MAX_TENTATIVAS_PRIMEIRO_CICLO = 2  # Apenas 2 tentativas no primeiro ciclo

        while itens_processados == 0 and _rpa_running:
            tentativas_verificacao += 1

            # Buscar linhas para processar (Status = "CONCLU√çDO" e Status Oracle vazio)
            # IMPORTANTE: Buscar at√© coluna AC (ID est√° na coluna AC)
            res = service.spreadsheets().values().get(
                spreadsheetId=SPREADSHEET_ID,
                range=f"{SHEET_NAME}!A1:AC"
            ).execute()

            valores = res.get("values", [])
            if not valores:
                gui_log("‚ö†Ô∏è Nenhuma linha encontrada no Google Sheets")
                if not aguardar_com_pausa(30, "Aguardando novas linhas no Google Sheets"):
                    return False
                continue

            headers, dados = valores[0], valores[1:]

            # Log de debug para verificar se ID est√° nos headers
            if "ID" in headers:
                idx_id = headers.index("ID")
                gui_log(f"‚úÖ Coluna ID encontrada no √≠ndice {idx_id} (coluna {chr(65 + idx_id)})")
            else:
                gui_log(f"‚ö†Ô∏è AVISO: Coluna ID n√£o encontrada nos headers!")
                gui_log(f"üìã Headers dispon√≠veis: {', '.join(headers[:10])}... (total: {len(headers)})")

            # Filtrar linhas para processar
            # üîí TRAVA 4: Ignorar linhas com "PROCESSANDO..." (Lock tempor√°rio)
            linhas_processar = []
            for i, row in enumerate(dados):
                if len(row) < len(headers):
                    row += [''] * (len(headers) - len(row))
                idx_status_oracle = headers.index("Status Oracle")
                idx_status = headers.index("Status")
                status_oracle = row[idx_status_oracle].strip()
                status = row[idx_status].strip().upper()

                # S√≥ processa se Status Oracle estiver VAZIO (n√£o "PROCESSANDO...", n√£o "Conclu√≠do", etc)
                # E Status cont√©m "CONCLU√çDO"
                if status_oracle == "" and "CONCLU√çDO" in status:
                    linhas_processar.append((i + 2, dict(zip(headers, row))))

            if not linhas_processar:
                gui_log(f"‚è≥ Nenhuma linha nova para processar (verifica√ß√£o #{tentativas_verificacao})")

                # L√ìGICA DIFERENTE PARA PRIMEIRO CICLO
                if primeiro_ciclo and tentativas_verificacao >= MAX_TENTATIVAS_PRIMEIRO_CICLO:
                    gui_log(f"‚úÖ Primeiro ciclo: Ap√≥s {MAX_TENTATIVAS_PRIMEIRO_CICLO} tentativas sem itens, prosseguindo para Bancada")

                    # ‚ö° CLICAR NO BOT√ÉO PARA PREPARAR FECHAMENTO
                    # Clicar no bot√£o (330, 66) para preparar o Oracle para fechamento
                    gui_log("üñ±Ô∏è Clicando no bot√£o de prepara√ß√£o (330, 66)...")
                    if not MODO_TESTE:
                        pyautogui.click(330, 66)
                        time.sleep(1.0)
                    else:
                        gui_log("[MODO TESTE] Simulando clique no bot√£o")

                    # Retornar sucesso para continuar o fluxo (ir para Bancada)
                    tempo_espera = config["tempos_espera"]["apos_rpa_oracle"]
                    aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o p√≥s-Oracle")
                    return True

                gui_log("‚è≥ Aguardando 30 segundos antes de verificar novamente...")
                if not aguardar_com_pausa(30, "Aguardando novos itens"):
                    return False
                continue

            gui_log(f"üìã {len(linhas_processar)} linhas encontradas para processar")

            # Processar cada linha
            for i, linha in linhas_processar:
                if not _rpa_running:
                    return False

                item = linha.get("Item", "").strip()
                sub_o = linha.get("Sub.Origem", "").strip()
                end_o = linha.get("End. Origem", "").strip()
                sub_d = linha.get("Sub. Destino", "").strip()
                end_d = linha.get("End. Destino", "").strip()
                quantidade = linha.get("Quantidade", "")
                referencia = linha.get("C√≥d Referencia", "")

                # Usar ID (coluna AC) como identificador √∫nico
                id_linha = linha.get("ID", "").strip()

                # Log de debug para ver o ID encontrado
                gui_log(f"üîç Linha {i}: ID encontrado = '{id_linha}'")

                # Se ID estiver vazio, usar n√∫mero da linha como fallback
                if not id_linha:
                    id_linha = f"linha_{i}"
                    gui_log(f"‚ö†Ô∏è Linha {i}: ID vazio, usando fallback: {id_linha}")
                else:
                    gui_log(f"‚úÖ Linha {i}: Usando ID = {id_linha}")

                # ‚úÖ VERIFICAR CACHE ANTI-DUPLICA√á√ÉO
                if cache.ja_processado(id_linha):
                    gui_log(f"‚è≠Ô∏è Linha {i} (ID: {id_linha}) j√° processada anteriormente. Pulando.")
                    continue

                # üîí TRAVA 4: LOCK TEMPOR√ÅRIO - Marcar como "PROCESSANDO..." antes de processar
                # Isso evita que outras inst√¢ncias peguem a mesma linha
                try:
                    idx_status_oracle = headers.index("Status Oracle")
                    coluna_letra = indice_para_coluna(idx_status_oracle)
                    range_str = f"{SHEET_NAME}!{coluna_letra}{i}"

                    gui_log(f"üîí [LOCK] Marcando linha {i} como 'PROCESSANDO...' (coluna {coluna_letra})")
                    service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=range_str,
                        valueInputOption="RAW",
                        body={"values": [["PROCESSANDO..."]]}
                    ).execute()
                    gui_log(f"‚úÖ [LOCK] Linha {i} bloqueada com sucesso")
                except Exception as e_lock:
                    gui_log(f"‚ö†Ô∏è [LOCK] Erro ao marcar linha {i} como PROCESSANDO: {e_lock}")
                    # Se n√£o conseguir fazer o lock, pula para pr√≥xima linha (seguran√ßa)
                    continue

                # REGRA 3: Validar campos vazios
                if not item or not sub_o or not end_o or not sub_d or not end_d:
                    gui_log(f"‚ö†Ô∏è Linha {i} PULADA - Campo vazio encontrado")
                    service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=f"{SHEET_NAME}!T{i}",
                        valueInputOption="RAW",
                        body={"values": [["Campo vazio encontrado"]]}
                    ).execute()
                    continue

                # REGRA 1: Validar quantidade = 0
                try:
                    qtd_float = float(str(quantidade).replace(",", ".").replace(" ", ""))
                    if qtd_float == 0:
                        gui_log(f"‚ö†Ô∏è Linha {i} PULADA - Quantidade Zero")
                        service.spreadsheets().values().update(
                            spreadsheetId=SPREADSHEET_ID,
                            range=f"{SHEET_NAME}!T{i}",
                            valueInputOption="RAW",
                            body={"values": [["Quantidade Zero"]]}
                        ).execute()
                        continue
                    if qtd_float < 0:
                        continue
                except ValueError:
                    continue

                # Definir lista de subinvent√°rios proibidos
                subs_proibidos = ["RAWINDIR", "RAWMANUT", "RAWWAFIFE"]
                sub_o_upper = sub_o.upper()
                sub_d_upper = sub_d.upper()

                # REGRA 2: Validar combina√ß√£o proibida: origem proibida ‚Üí RAWCENTR
                if sub_o_upper in subs_proibidos and sub_d_upper == "RAWCENTR":
                    gui_log(f"‚ö†Ô∏è Linha {i} PULADA - Transa√ß√£o n√£o autorizada: {sub_o} ‚Üí {sub_d}")
                    service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=f"{SHEET_NAME}!T{i}",
                        valueInputOption="RAW",
                        body={"values": [["Transa√ß√£o n√£o autorizada"]]}
                    ).execute()
                    continue

                # REGRA 4: Validar origem proibida ‚Üí destino deve ser igual √† origem
                if sub_o_upper in subs_proibidos and sub_o_upper != sub_d_upper:
                    gui_log(f"‚ö†Ô∏è Linha {i} PULADA - Transa√ß√£o n√£o autorizada: {sub_o} ‚Üí {sub_d} (origem proibida deve ir para si mesma)")
                    service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=f"{SHEET_NAME}!T{i}",
                        valueInputOption="RAW",
                        body={"values": [["Transa√ß√£o n√£o autorizada"]]}
                    ).execute()
                    continue

                gui_log(f"‚ñ∂ Linha {i}: {item} | Qtd={quantidade} | Ref={referencia}")

                # üîí TRAVA 5: TIMEOUT DE SEGURAN√áA - Registrar in√≠cio do processamento
                inicio_processamento = time.time()
                TIMEOUT_PROCESSAMENTO = 60  # 60 segundos por linha

                if MODO_TESTE:
                    gui_log("[MODO TESTE] Simulando preenchimento no Oracle (sem pyautogui)...")
                    time.sleep(0.5)  # Simula tempo de preenchimento
                else:
                    # Preencher Oracle
                    pyautogui.click(coords["item"])
                    pyautogui.press("delete")
                    pyautogui.write(item)
                    pyautogui.press("tab")
                    time.sleep(1)

                    pyautogui.click(coords["Referencia"])
                    pyautogui.write(referencia)
                    time.sleep(1)

                    pyautogui.click(coords["sub_origem"])
                    pyautogui.write(sub_o)
                    pyautogui.press("tab")
                    time.sleep(1)

                    pyautogui.press("delete")
                    pyautogui.click(coords["end_origem"])
                    pyautogui.write(end_o)
                    pyautogui.press("tab")
                    time.sleep(1)

                    # Se refer√™ncia come√ßa com "COD", pula destino
                    if str(referencia).strip().upper().startswith("COD"):
                        pyautogui.press("tab")
                        time.sleep(1)
                        pyautogui.press("tab")
                        time.sleep(1)
                    else:
                        pyautogui.press("delete")
                        pyautogui.click(coords["sub_destino"])
                        pyautogui.write(sub_d)
                        pyautogui.press("tab")
                        time.sleep(1)

                        pyautogui.press("delete")
                        pyautogui.click(coords["end_destino"])
                        pyautogui.write(end_d)
                        pyautogui.press("tab")
                        time.sleep(1)

                    pyautogui.press("delete")
                    pyautogui.click(coords["quantidade"])
                    pyautogui.write(quantidade)
                    time.sleep(1)

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # üîí TRAVAS DE VALIDA√á√ÉO ANTES DO Ctrl+S
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                    # üîí TRAVA 5: Verificar TIMEOUT
                    tempo_decorrido = time.time() - inicio_processamento
                    if tempo_decorrido > TIMEOUT_PROCESSAMENTO:
                        gui_log(f"‚è±Ô∏è [TIMEOUT] Linha {i} demorou {tempo_decorrido:.1f}s (limite: {TIMEOUT_PROCESSAMENTO}s)")
                        gui_log(f"‚ö†Ô∏è [TIMEOUT] Abortando processamento da linha {i} por seguran√ßa")
                        # Reverter lock
                        try:
                            service.spreadsheets().values().update(
                                spreadsheetId=SPREADSHEET_ID,
                                range=range_str,
                                valueInputOption="RAW",
                                body={"values": [["TIMEOUT - Verificar manualmente"]]}
                            ).execute()
                        except:
                            pass
                        continue  # Pula para pr√≥xima linha

                    # üîí TRAVA 3: Valida√ß√£o de consist√™ncia dos dados digitados
                    # Verificar se campos obrigat√≥rios n√£o est√£o vazios (dupla verifica√ß√£o)
                    gui_log("üîç [VALIDA√á√ÉO] Verificando consist√™ncia dos dados antes do Ctrl+S...")

                    # Validar quantidade (n√£o pode ser negativa ou zero ap√≥s processamento)
                    try:
                        qtd_float = float(str(quantidade).replace(",", ".").replace(" ", ""))
                        if qtd_float <= 0:
                            gui_log(f"‚ö†Ô∏è [VALIDA√á√ÉO] Quantidade inv√°lida detectada: {quantidade}")
                            gui_log(f"‚ö†Ô∏è [VALIDA√á√ÉO] Abortando Ctrl+S para linha {i}")
                            # Reverter lock
                            try:
                                service.spreadsheets().values().update(
                                    spreadsheetId=SPREADSHEET_ID,
                                    range=range_str,
                                    valueInputOption="RAW",
                                    body={"values": [["Quantidade inv√°lida"]]}
                                ).execute()
                            except:
                                pass
                            continue
                    except ValueError:
                        gui_log(f"‚ö†Ô∏è [VALIDA√á√ÉO] Quantidade n√£o num√©rica: {quantidade}")
                        continue

                    # Validar que campos cr√≠ticos n√£o est√£o vazios
                    if not item.strip() or not sub_o.strip() or not end_o.strip():
                        gui_log(f"‚ö†Ô∏è [VALIDA√á√ÉO] Campos cr√≠ticos vazios detectados antes do Ctrl+S")
                        continue

                    # Se n√£o √© COD, validar destino tamb√©m
                    if not str(referencia).strip().upper().startswith("COD"):
                        if not sub_d.strip() or not end_d.strip():
                            gui_log(f"‚ö†Ô∏è [VALIDA√á√ÉO] Campos de destino vazios (n√£o √© COD)")
                            continue

                    gui_log("‚úÖ [VALIDA√á√ÉO] Todos os dados est√£o consistentes. Prosseguindo com Ctrl+S...")

                    # üîí TRAVA 2: Verifica√ß√£o visual na tela com OCR
                    gui_log("üëÅÔ∏è [VISUAL] Iniciando verifica√ß√£o visual com OCR...")
                    time.sleep(0.5)  # Pausa breve para estabiliza√ß√£o da tela

                    # Validar campos usando OCR
                    ocr_ok = validar_campos_oracle_ocr(
                        coords, item, quantidade, referencia,
                        sub_o, end_o, sub_d, end_d
                    )

                    if not ocr_ok:
                        gui_log("‚ùå [OCR] Valida√ß√£o visual falhou! Abortando Ctrl+S")
                        # Reverter lock
                        try:
                            service.spreadsheets().values().update(
                                spreadsheetId=SPREADSHEET_ID,
                                range=range_str,
                                valueInputOption="RAW",
                                body={"values": [["OCR - Dados n√£o conferem"]]}
                            ).execute()
                        except:
                            pass
                        continue  # Pula para pr√≥xima linha

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # ‚úÖ TODAS AS VALIDA√á√ïES PASSARAM - EXECUTAR Ctrl+S
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                    # Salvar (Ctrl+S) - com flag de teste
                    if globals().get('SEM_CTRL_S', False):
                        gui_log("[TESTE] Ctrl+S SIMULADO (nao executado)")
                        time.sleep(1)

                        # No modo TESTE, limpar o formul√°rio ap√≥s processar
                        gui_log("üßπ [TESTE] Limpando formul√°rio...")
                        # Coordenadas do bot√£o Limpar (tela_06_limpar do config.json)
                        if not MODO_TESTE:
                            pyautogui.click(332, 66)  # Bot√£o Limpar
                            time.sleep(1.5)
                        else:
                            gui_log("[MODO TESTE] Simulando clique no bot√£o Limpar")
                    else:
                        gui_log("üíæ [CTRL+S] Executando salvamento no Oracle...")
                        pyautogui.hotkey("ctrl", "s")
                        gui_log("‚è≥ Aguardando Oracle salvar...")
                        time.sleep(3)

                    gui_log("‚è≥ Inicio inser√ß√£o no cache...")

                # ‚úÖ GRAVAR NO CACHE (AP√ìS Ctrl+S, ANTES de tentar Sheets)
                sucesso_cache = cache.adicionar(
                    id_item=id_linha,
                    linha_atual=i,
                    item=item,
                    quantidade=quantidade,
                    referencia=referencia,
                    status="pendente"
                )
                if sucesso_cache:
                    gui_log(f"üíæ Registrado no cache: {id_linha}")
                else:
                    gui_log(f"‚ö†Ô∏è Falha ao registrar no cache (ID vazio?)")

                # Atualizar Google Sheets
                try:
                    service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=f"{SHEET_NAME}!T{i}",
                        valueInputOption="RAW",
                        body={"values": [["Processo Oracle Conclu√≠do"]]}
                    ).execute()

                    # ‚úÖ Marcar como conclu√≠do no cache
                    cache.marcar_concluido(id_linha)
                    gui_log(f"‚úÖ Linha {i} processada e salva no Oracle")
                except Exception as err:
                    gui_log(f"‚ö†Ô∏è Falha ao atualizar Sheets: {err}. Retry em background...")

                itens_processados += 1
                _dados_inseridos_oracle = True  # Marcar que dados foram inseridos
                time.sleep(0.5)

            # ‚úÖ CONTINUA PROCESSANDO TODOS OS ITENS DISPON√çVEIS
            # (Removido break que limitava a 1 item por ciclo)

        # Verificar se processou pelo menos 1 item antes de continuar
        if itens_processados == 0:
            gui_log("‚ö†Ô∏è Nenhum item foi processado (RPA foi interrompido)")
            return False

        gui_log(f"‚úÖ {itens_processados} linhas processadas com sucesso")

        tempo_espera = config["tempos_espera"]["apos_rpa_oracle"]
        return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o p√≥s-Oracle")

    except Exception as e:
        gui_log(f"‚ùå Erro ao processar Oracle: {e}")
        import traceback
        gui_log(traceback.format_exc())
        return False

def etapa_06_navegacao_pos_oracle(config):
    """Etapa 6: Navega√ß√£o ap√≥s RPA_Oracle - Fechar janelas e abrir Bancada

    NOVO FLUXO SIMPLIFICADO:
    - Se inseriu dados: limpar + fechar 2 X
    - Se N√ÉO inseriu: apenas fechar 2 X
    - Depois abrir Bancada
    """
    global _dados_inseridos_oracle

    gui_log("üìã ETAPA 6: Fechamento de modais e abertura da Bancada")

    tempo_espera = config["tempos_espera"]["entre_cliques"]

    # Verificar se dados foram inseridos no Oracle
    if _dados_inseridos_oracle:
        gui_log("üßπ Dados foram inseridos - Limpando formul√°rio primeiro...")

        # 1. Limpar formul√°rio (bot√£o Limpar)
        coord = config["coordenadas"]["tela_06_limpar"]
        clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

        if not aguardar_com_pausa(tempo_espera, "Aguardando limpeza"):
            return False
    else:
        gui_log("‚ÑπÔ∏è Nenhum dado foi inserido - Fechando modais diretamente...")

    # 2. Fechar janela "Subinventory Transfer (BC2)" - Bot√£o X
    gui_log("üî¥ Fechando 'Subinventory Transfer (BC2)'...")
    coord = config["coordenadas"]["tela_06_fechar_subinventory_transfer"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    if not aguardar_com_pausa(tempo_espera, "Aguardando fechar primeira janela"):
        return False

    # 3. Fechar janela "Transferencia do Subinventario (BC2)" - Bot√£o X
    gui_log("üî¥ Fechando 'Transferencia do Subinventario (BC2)'...")
    coord = config["coordenadas"]["tela_06_fechar_transferencia_subinventario_bc2"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    if not aguardar_com_pausa(tempo_espera, "Aguardando fechar segunda janela"):
        return False

    # 4. Clicar em "Janela" para dar foco
    gui_log("üñ±Ô∏è Clicando em 'Janela'...")
    coord = config["coordenadas"]["navegador_janela"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    if not aguardar_com_pausa(tempo_espera, "Aguardando foco na janela"):
        return False

    # 5. Clicar no menu de navega√ß√£o
    gui_log("üñ±Ô∏è Clicando no menu de navega√ß√£o...")
    coord = config["coordenadas"]["navegador_menu"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    if not aguardar_com_pausa(tempo_espera, "Aguardando menu navega√ß√£o"):
        return False

    # 6. Duplo clique para abrir a bancada
    gui_log("üìÇ Abrindo Bancada de Material...")
    coord = config["coordenadas"]["tela_07_bancada_material"]
    duplo_clique = coord.get("duplo_clique", False)
    clicar_coordenada(coord["x"], coord["y"], duplo=duplo_clique, descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    return aguardar_com_pausa(tempo_espera, "Aguardando abertura da Bancada")

def mapear_colunas_oracle_bancada(df):
    """
    Mapeia colunas do Oracle para nomes padronizados.
    Garante que as 8 colunas principais sejam identificadas.
    (Baseado no main.py da bancada)
    """
    gui_log(f"‚öôÔ∏è Mapeando colunas Oracle. Colunas recebidas: {list(df.columns)}")

    # Mapeamento exato das colunas Oracle para padronizadas
    mapeamento_exato = {
        'Org.': 'ORG.',
        'Sub.': 'SUB.',
        'Endere√ßo': 'ENDERE√áO',
        'Item': 'ITEM',
        'Descri√ß√£o do Item': 'DESCRI√á√ÉO ITEM',
        'Rev.': 'REV.',
        'UDM Principal': 'UDM PRINCIPAL',
        'Em Estoque': 'EM ESTOQUE',
        'Em Estoque ': 'EM ESTOQUE',  # Com espa√ßo extra
    }

    colunas_mapeadas = {}

    for col_original in df.columns:
        # Primeiro tenta mapeamento direto
        if col_original in mapeamento_exato:
            colunas_mapeadas[col_original] = mapeamento_exato[col_original]
            gui_log(f"   ‚úì Mapeado direto: '{col_original}' -> '{mapeamento_exato[col_original]}'")
        else:
            # Tenta mapeamento por similaridade (removendo acentos)
            col_clean = re.sub(r'[^\w\s]', '', col_original.strip())
            encontrado = False
            for key, value in mapeamento_exato.items():
                key_clean = re.sub(r'[^\w\s]', '', key.strip())
                if col_clean.lower() == key_clean.lower():
                    colunas_mapeadas[col_original] = value
                    gui_log(f"   ‚úì Mapeado fuzzy: '{col_original}' -> '{value}'")
                    encontrado = True
                    break
            if not encontrado:
                gui_log(f"   ‚úó N√ÉO mapeado: '{col_original}'")

    gui_log(f"üìä Total de colunas mapeadas: {len(colunas_mapeadas)}")

    # Se nenhuma coluna foi mapeada, retorna DataFrame original
    if len(colunas_mapeadas) == 0:
        gui_log("‚ö†Ô∏è NENHUMA coluna foi mapeada! Retornando DataFrame original")
        return df

    # Renomear colunas
    df_renamed = df.rename(columns=colunas_mapeadas)

    # Manter apenas as 8 colunas desejadas
    colunas_finais = ['ORG.', 'SUB.', 'ENDERE√áO', 'ITEM', 'DESCRI√á√ÉO ITEM', 'REV.', 'UDM PRINCIPAL', 'EM ESTOQUE']
    colunas_disponiveis = [col for col in colunas_finais if col in df_renamed.columns]

    gui_log(f"üìã Colunas finais selecionadas: {colunas_disponiveis}")

    if len(colunas_disponiveis) == 0:
        gui_log("‚ö†Ô∏è Nenhuma coluna dispon√≠vel ap√≥s filtro! Retornando DataFrame original")
        return df

    return df_renamed[colunas_disponiveis]

def texto_para_df_bancada(tsv_texto):
    """
    Converte o texto copiado do Oracle (TSV) em DataFrame limpo.
    (Baseado no main.py da bancada)
    """
    if not PANDAS_DISPONIVEL:
        gui_log("‚ùå pandas n√£o dispon√≠vel - n√£o √© poss√≠vel processar dados")
        return None

    gui_log(f"üîç Processando clipboard: {len(tsv_texto):,} caracteres")

    if not tsv_texto or len(tsv_texto) < 10:
        gui_log("‚ö†Ô∏è Clipboard vazio ou muito pequeno")
        return pd.DataFrame()

    try:
        # Normaliza quebras de linha
        tsv = tsv_texto.replace("\r\n", "\n").replace("\r", "\n")

        gui_log(f"üìä Lendo dados como TSV...")
        df = pd.read_csv(StringIO(tsv), sep="\t", engine="python", on_bad_lines='skip')

        gui_log(f"‚úÖ DataFrame inicial: {df.shape[0]:,} linhas x {df.shape[1]} colunas")

        # Se realmente parece uma tabela
        if df.shape[1] >= 2:
            # Remove colunas totalmente vazias
            df = df.dropna(axis=1, how="all")
            gui_log(f"üßπ Ap√≥s remover colunas vazias: {df.shape[1]} colunas")

            # Remove linhas completamente vazias
            linhas_antes = df.shape[0]
            df = df.dropna(how="all")
            gui_log(f"üßπ Ap√≥s remover linhas vazias: {df.shape[0]:,} linhas (removidas: {linhas_antes - df.shape[0]:,})")

            # Se a primeira linha for igual ao cabe√ßalho, descarta
            if len(df) > 0 and df.iloc[0].tolist() == list(df.columns):
                df = df.iloc[1:]
                gui_log(f"üßπ Removida linha duplicada do cabe√ßalho")

            gui_log(f"‚öôÔ∏è Aplicando mapeamento de colunas Oracle...")
            # Aplicar mapeamento inteligente de colunas
            df_mapeado = mapear_colunas_oracle_bancada(df)

            # Limpar dados (substituir NaN por string vazia)
            df_mapeado = df_mapeado.fillna('')

            gui_log(f"‚úÖ Dados processados: {df_mapeado.shape[0]:,} linhas x {df_mapeado.shape[1]} colunas")
            gui_log(f"üìã Colunas: {list(df_mapeado.columns)}")
            return df_mapeado.reset_index(drop=True)
        else:
            gui_log(f"‚ö†Ô∏è DataFrame tem apenas {df.shape[1]} coluna(s), esperado >= 2")
            return pd.DataFrame()

    except Exception as e:
        gui_log(f"‚ùå ERRO parseando TSV: {type(e).__name__}: {e}")
        import traceback
        gui_log(f"Stack trace: {traceback.format_exc()}")

        # Se o texto √© muito grande, pode ser limita√ß√£o de processamento
        if len(tsv_texto) > 50000:  # Mais de 50k caracteres
            gui_log(f"üîÑ Texto grande ({len(tsv_texto):,} chars), tentando processamento direto com engine C...")
            try:
                tsv_simples = tsv_texto.replace("\r\n", "\n").replace("\r", "\n")
                df_direto = pd.read_csv(StringIO(tsv_simples), sep="\t", engine="c", low_memory=False, on_bad_lines='skip')

                gui_log(f"‚úÖ DataFrame direto: {df_direto.shape[0]:,} linhas x {df_direto.shape[1]} colunas")

                if df_direto.shape[1] >= 2:
                    df_mapeado_direto = mapear_colunas_oracle_bancada(df_direto)
                    df_final_direto = df_mapeado_direto.fillna('')

                    gui_log(f"‚úÖ Processamento direto bem-sucedido: {df_final_direto.shape[0]:,} linhas x {df_final_direto.shape[1]} colunas")
                    return df_final_direto.reset_index(drop=True)
                else:
                    gui_log(f"‚ö†Ô∏è Processamento direto: apenas {df_direto.shape[1]} coluna(s)")

            except Exception as e2:
                gui_log(f"‚ùå Processamento direto tamb√©m falhou: {type(e2).__name__}: {e2}")

    # Fallback: retorna DataFrame vazio
    gui_log("‚ö†Ô∏è Usando fallback - DataFrame vazio")
    return pd.DataFrame()

def salvar_excel_bancada(df):
    """
    Salva o DataFrame em XLSX (um arquivo por dia).
    Retorna o caminho do arquivo salvo.
    (Baseado no main.py da bancada)
    """
    if not PANDAS_DISPONIVEL:
        gui_log("‚ùå pandas n√£o dispon√≠vel - n√£o √© poss√≠vel salvar Excel")
        return None

    # Criar pasta out/ se n√£o existir
    base_dir = Path(base_path)
    out_dir = base_dir / "out"
    out_dir.mkdir(exist_ok=True)

    hoje = pd.Timestamp.now().strftime("%Y-%m-%d")
    xlsx = out_dir / f"bancada-{hoje}.xlsx"

    try:
        gui_log(f"üíæ Preparando para salvar {df.shape[0]:,} linhas x {df.shape[1]} colunas")

        if xlsx.exists():
            gui_log(f"üìÇ Arquivo existente encontrado, concatenando dados...")
            old = pd.read_excel(xlsx, engine='openpyxl')
            df = pd.concat([old, df], ignore_index=True)
            gui_log(f"üìä Total ap√≥s concatena√ß√£o: {df.shape[0]:,} linhas")

        # Salva apenas as colunas de interesse
        if not df.empty:
            gui_log(f"üíæ Salvando arquivo Excel em {xlsx}...")

            # Converter todas as colunas para string para evitar interpreta√ß√£o como data
            df_to_save = df.astype(str)

            df_to_save.to_excel(xlsx, index=False, engine='openpyxl')
            gui_log(f"‚úÖ Excel salvo: {xlsx} ({df.shape[0]:,} linhas, {df.shape[1]} colunas)")
            return str(xlsx)
        else:
            gui_log("‚ö†Ô∏è Nenhum dado v√°lido para salvar.")
            return None
    except MemoryError as e:
        gui_log(f"‚ùå ERRO DE MEM√ìRIA ao salvar Excel: {e}")
        gui_log("üí° Tente fechar outros programas e executar novamente")
        return None
    except ImportError as e:
        gui_log(f"‚ùå ERRO: Biblioteca openpyxl n√£o encontrada: {e}")
        gui_log("üí° Execute: pip install openpyxl")
        return None
    except Exception as e:
        gui_log(f"‚ùå Erro salvando XLSX: {type(e).__name__}: {e}")
        import traceback
        gui_log(f"Stack trace: {traceback.format_exc()}")
        return None

def monitorar_clipboard_inteligente(max_tempo=15*60, intervalo_check=5, estabilidade_segundos=30):
    """
    Monitora o clipboard de forma inteligente e detecta quando Oracle terminou de copiar.

    Args:
        max_tempo: Tempo m√°ximo de espera (padr√£o: 15 minutos)
        intervalo_check: Intervalo entre verifica√ß√µes (padr√£o: 5 segundos)
        estabilidade_segundos: Tempo sem mudan√ßa para considerar completo (padr√£o: 30 segundos)

    Returns:
        str: Conte√∫do do clipboard ou string vazia se falhar
    """
    try:
        import pyperclip
    except ImportError:
        gui_log("‚ùå pyperclip n√£o dispon√≠vel")
        return ""

    import hashlib

    gui_log("=" * 60)
    gui_log("üîç MONITORAMENTO INTELIGENTE DO CLIPBOARD")
    gui_log("=" * 60)
    gui_log(f"‚è±Ô∏è Tempo m√°ximo: {max_tempo//60} minutos")
    gui_log(f"üîÑ Verifica√ß√£o a cada: {intervalo_check} segundos")
    gui_log(f"‚úÖ Estabilidade requerida: {estabilidade_segundos} segundos")
    gui_log("")

    inicio = time.time()
    ultimo_hash = ""
    ultimo_tamanho = 0
    tempo_sem_mudanca = 0
    verificacoes = 0

    while (time.time() - inicio) < max_tempo:
        if not _rpa_running:
            gui_log("‚è∏Ô∏è Monitoramento cancelado pelo usu√°rio")
            return ""

        verificacoes += 1
        tempo_decorrido = int(time.time() - inicio)

        # Ler clipboard atual
        texto_atual = pyperclip.paste() or ""
        tamanho_atual = len(texto_atual)

        # Calcular hash para detectar mudan√ßas
        hash_atual = hashlib.md5(texto_atual.encode('utf-8')).hexdigest() if texto_atual else ""

        # Detectar mudan√ßa
        if hash_atual != ultimo_hash:
            # Clipboard mudou!
            linhas = texto_atual.count('\n')
            kb = tamanho_atual / 1024

            if tamanho_atual > 0:
                if ultimo_tamanho == 0:
                    # Primeira vez que detecta dados - c√≥pia iniciou!
                    gui_log(f"‚ú® [{tempo_decorrido}s] üé¨ C√ìPIA INICIADA! Primeiro bloco de dados detectado")
                gui_log(f"üìä [{tempo_decorrido}s] Copiando... {tamanho_atual:,} chars ({kb:.1f} KB) | {linhas:,} linhas")
            else:
                gui_log(f"üîç [{tempo_decorrido}s] Aguardando modal 'Exporta√ß√£o em andamento' abrir...")

            # Resetar contador de estabilidade
            tempo_sem_mudanca = 0
            ultimo_hash = hash_atual
            ultimo_tamanho = tamanho_atual
        else:
            # Clipboard n√£o mudou
            tempo_sem_mudanca += intervalo_check

            if tamanho_atual > 50:  # Tem dados
                gui_log(f"‚è≥ [{tempo_decorrido}s] Clipboard est√°vel: {tamanho_atual:,} chars | Est√°vel por {tempo_sem_mudanca}s")

                # VERIFICAR SE ESTABILIZOU (dados completos!)
                if tempo_sem_mudanca >= estabilidade_segundos:
                    linhas = texto_atual.count('\n')
                    kb = tamanho_atual / 1024

                    gui_log("=" * 60)
                    gui_log("‚úÖ C√ìPIA COMPLETA DETECTADA!")
                    gui_log("üéâ Modal 'Exporta√ß√£o em andamento' fechou - dados finalizados!")
                    gui_log(f"‚è±Ô∏è Tempo total: {tempo_decorrido} segundos ({tempo_decorrido//60}m {tempo_decorrido%60}s)")
                    gui_log(f"üìä Tamanho final: {tamanho_atual:,} caracteres ({kb:.2f} KB)")
                    gui_log(f"üìã Total de linhas: {linhas:,}")
                    gui_log(f"üîÑ Verifica√ß√µes realizadas: {verificacoes}")
                    gui_log(f"üíæ Economizou: {(max_tempo - tempo_decorrido)//60} minutos de espera!")
                    gui_log("=" * 60)

                    return texto_atual
            else:
                # Clipboard ainda vazio
                if verificacoes % 10 == 0:  # Log a cada 30s (10 * 3s)
                    gui_log(f"‚è≥ [{tempo_decorrido}s] Modal 'Exporta√ß√£o em andamento' vis√≠vel - aguardando dados...")

        # Aguardar pr√≥xima verifica√ß√£o
        time.sleep(intervalo_check)

    # Timeout atingido
    texto_final = pyperclip.paste() or ""
    tamanho_final = len(texto_final)

    gui_log("=" * 60)
    gui_log("‚è±Ô∏è TIMEOUT: Tempo m√°ximo atingido")
    gui_log(f"üìä Tamanho no timeout: {tamanho_final:,} caracteres")

    if tamanho_final > 50:
        linhas = texto_final.count('\n')
        gui_log(f"üìã Linhas no timeout: {linhas:,}")
        gui_log("‚ö†Ô∏è Retornando dados mesmo com timeout...")
        gui_log("=" * 60)
        return texto_final
    else:
        gui_log("‚ùå Clipboard vazio mesmo ap√≥s timeout")
        gui_log("=" * 60)
        return ""

def etapa_07_executar_rpa_bancada(config):
    """
    Etapa 7: Extrair dados da Bancada (modo standalone)
    Baseado no main.py da bancada que funciona corretamente
    """
    gui_log("=" * 60)
    gui_log("ü§ñ ETAPA 7: Extra√ß√£o de dados da Bancada")
    gui_log("=" * 60)

    try:
        # Verificar pyperclip
        try:
            import pyperclip
            gui_log("‚úÖ pyperclip dispon√≠vel para copiar dados")
        except ImportError:
            gui_log("‚ö†Ô∏è pyperclip n√£o dispon√≠vel - pulando extra√ß√£o de dados")
            tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
            return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

        # PASSO 1: Clicar em "Detalhado"
        gui_log("üìç [1/9] Clicando em 'Detalhado'...")
        coord = config["coordenadas"]["bancada_detalhado"]
        clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

        if not _rpa_running:
            return False

        # PASSO 2: Pressionar Enter (ao inv√©s de clicar em Localizar)
        gui_log("‚å®Ô∏è [2/9] Pressionando Enter...")
        if MODO_TESTE:
            gui_log("[MODO TESTE] Simulando Enter")
        else:
            pyautogui.press('enter')

        time.sleep(1.2)  # SLEEP_ABERTURA do main.py

        if not _rpa_running:
            return False

        # PASSO 3: Aguardar 2 minutos antes de clicar na c√©lula
        gui_log("‚è≥ [3/9] Aguardando 2 minutos para grid carregar...")
        if not aguardar_com_pausa(120, "Carregamento da grid (2 minutos)"):
            return False

        # PASSO 4: Clicar na primeira c√©lula da coluna 'Org.'
        gui_log("üìç [4/9] Clicando na c√©lula Org...")
        coord = config["coordenadas"]["bancada_celula_org"]
        clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

        if not _rpa_running:
            return False

        # PASSO 5: Limpar clipboard ANTES de copiar
        gui_log("üßπ [5/9] Limpando clipboard...")
        pyperclip.copy('')
        time.sleep(0.3)

        # PASSO 6: Abrir menu via Shift+F10
        gui_log("‚å®Ô∏è [6/9] Abrindo menu de contexto (Shift+F10)...")
        if MODO_TESTE:
            gui_log("[MODO TESTE] Simulando Shift+F10")
        else:
            pyautogui.hotkey('shift', 'f10')

        time.sleep(1.5)

        # PASSO 7: Navegar menu e selecionar "Copiar Todas as Linhas"
        gui_log("‚å®Ô∏è [7/9] Navegando menu para 'Copiar Todas as Linhas'...")
        if MODO_TESTE:
            gui_log("[MODO TESTE] Simulando navega√ß√£o")
        else:
            for i in range(3):
                pyautogui.press('down')
                time.sleep(0.25)
                gui_log(f"   Seta para baixo {i+1}/3")

            gui_log("   Pressionando Enter para copiar...")
            pyautogui.press('enter')
            time.sleep(0.6)

        if not _rpa_running:
            return False

        # PASSO 8: MONITORAMENTO INTELIGENTE DO CLIPBOARD
        # Quando clica em "Copiar Todas as Linhas", Oracle abre modal "Exporta√ß√£o em andamento"
        # Modal abre = c√≥pia iniciou | Modal fecha = c√≥pia completa
        gui_log("")
        gui_log("üéØ [8/9] Iniciando monitoramento inteligente do clipboard...")
        gui_log("üí° Modal 'Exporta√ß√£o em andamento' indica que c√≥pia est√° em progresso")
        gui_log("üí° Sistema detectar√° automaticamente quando modal fechar (c√≥pia completa)")
        gui_log("")

        texto_copiado = monitorar_clipboard_inteligente(
            max_tempo=15 * 60,        # M√°ximo 15 minutos
            intervalo_check=3,        # Verificar a cada 3 segundos (mais r√°pido)
            estabilidade_segundos=30  # Considerar completo ap√≥s 30s sem mudan√ßa
        )

        if not texto_copiado or len(texto_copiado) < 50:
            gui_log("‚ùå ERRO: Clipboard vazio ap√≥s todas as tentativas")
            gui_log("üí° O Oracle pode n√£o ter conseguido copiar os dados")
            gui_log("üí° Verifique se a grid tem dados e tente novamente")
            return False

        # Dados copiados com sucesso!
        linhas = texto_copiado.count('\n')
        tamanho_kb = len(texto_copiado.encode('utf-8')) / 1024
        gui_log("=" * 60)
        gui_log("‚úÖ DADOS COPIADOS COM SUCESSO!")
        gui_log(f"üìä Total: {linhas:,} linhas")
        gui_log(f"üì¶ Tamanho: {tamanho_kb:.2f} KB ({len(texto_copiado):,} caracteres)")
        gui_log("=" * 60)

        # Mostrar preview dos primeiros 500 caracteres
        preview = texto_copiado[:500].replace('\n', '\\n').replace('\t', '\\t')
        gui_log(f"üëÄ Preview (500 chars): {preview}...")

        # PROCESSAR DADOS COPIADOS
        gui_log("")
        gui_log("=" * 60)
        gui_log("üìã PROCESSANDO DADOS DA BANCADA")
        gui_log("=" * 60)

        if not PANDAS_DISPONIVEL:
            gui_log("‚ö†Ô∏è pandas n√£o dispon√≠vel - pulando processamento")
            tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
            return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

        # Converter texto TSV para DataFrame
        df = texto_para_df_bancada(texto_copiado)

        if df is None or df.empty:
            gui_log("‚ùå Falha ao processar dados - DataFrame vazio")
            tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
            return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

        gui_log(f"‚úÖ Dados processados: {df.shape[0]:,} linhas x {df.shape[1]} colunas")

        # SALVAR EM EXCEL LOCAL
        gui_log("")
        gui_log("üíæ Salvando dados em Excel local...")
        arquivo_excel = salvar_excel_bancada(df)

        if arquivo_excel:
            gui_log(f"‚úÖ Excel salvo: {arquivo_excel}")
        else:
            gui_log("‚ö†Ô∏è Falha ao salvar Excel local, mas continuando...")

        # ENVIAR PARA GOOGLE SHEETS
        if GOOGLE_SHEETS_BANCADA_DISPONIVEL and not df.empty:
            gui_log("")
            gui_log("‚òÅÔ∏è Enviando dados para Google Sheets...")

            try:
                sucesso_sheets = enviar_para_google_sheets(df)

                if sucesso_sheets:
                    gui_log("‚úÖ Dados enviados para Google Sheets com sucesso!")
                else:
                    gui_log("‚ùå Falha ao enviar para Google Sheets")
            except Exception as e:
                gui_log(f"‚ùå Erro ao enviar para Google Sheets: {e}")
                import traceback
                gui_log(traceback.format_exc())
        else:
            if not GOOGLE_SHEETS_BANCADA_DISPONIVEL:
                gui_log("‚ö†Ô∏è Google Sheets (bancada) n√£o configurado")
                gui_log("üí° Os dados foram salvos apenas localmente")

        gui_log("")
        gui_log("=" * 60)
        gui_log("‚úÖ PROCESSAMENTO DA BANCADA CONCLU√çDO")
        gui_log("=" * 60)

        tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
        return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

    except Exception as e:
        gui_log("=" * 60)
        gui_log(f"‚ùå ERRO ao extrair dados da Bancada: {e}")
        gui_log("=" * 60)
        import traceback
        gui_log(traceback.format_exc())

        # N√£o falhar o ciclo por causa disso
        tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
        return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")


def etapa_08_fechar_bancada(config):
    """Etapa 8: Fechar a janela da Bancada"""
    gui_log("üìã ETAPA 8: Fechamento da Bancada")

    coord = config["coordenadas"]["tela_08_fechar_bancada"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando fechamento")

# =================== EXECU√á√ÉO DO CICLO COMPLETO ===================
def executar_ciclo_completo(config):
    """Executa um ciclo completo de todas as etapas"""
    global _ciclo_atual, _data_inicio_ciclo

    _ciclo_atual += 1
    _data_inicio_ciclo = datetime.now()
    primeiro_ciclo = (_ciclo_atual == 1)  # Verificar se √© o primeiro ciclo

    gui_log("=" * 60)
    gui_log(f"üîÑ CICLO #{_ciclo_atual} - {_data_inicio_ciclo.strftime('%Y-%m-%d %H:%M:%S')}")
    if primeiro_ciclo:
        gui_log("üÜï PRIMEIRO CICLO - Se n√£o houver itens ap√≥s 2 tentativas, prossegue para Bancada")
    gui_log("=" * 60)

    # Registrar in√≠cio no Google Sheets
    if GOOGLE_SHEETS_DISPONIVEL:
        try:
            registrar_ciclo(
                ciclo_numero=_ciclo_atual,
                status="Em Execu√ß√£o",
                data_inicio=_data_inicio_ciclo
            )
        except Exception as e:
            gui_log(f"‚ö†Ô∏è Erro ao registrar no Google Sheets: {e}")

    etapas_status = {
        "RPA Oracle": "Pendente",
        "RPA Bancada": "Pendente"
    }

    try:
        # Executar todas as etapas em sequ√™ncia
        etapas = [
            ("Transfer√™ncia Subinvent√°rio", etapa_01_transferencia_subinventario, False),
            ("Preenchimento Tipo", etapa_02_preencher_tipo, False),
            ("Sele√ß√£o e Confirma√ß√£o Funcion√°rio", etapa_03_selecionar_funcionario, False),
            ("RPA Oracle", etapa_05_executar_rpa_oracle, True),  # Aceita par√¢metro primeiro_ciclo
            ("Navega√ß√£o", etapa_06_navegacao_pos_oracle, False),
            ("RPA Bancada", etapa_07_executar_rpa_bancada, False),
            ("Fechamento Bancada", etapa_08_fechar_bancada, False)
        ]

        for nome_etapa, funcao_etapa, aceita_primeiro_ciclo in etapas:
            if not _rpa_running:
                gui_log("‚è∏Ô∏è Ciclo interrompido pelo usu√°rio")

                # Atualizar no Google Sheets
                if GOOGLE_SHEETS_DISPONIVEL:
                    try:
                        atualizar_ciclo(_ciclo_atual, "Status", "Pausado")
                        atualizar_ciclo(_ciclo_atual, "Etapa Falha", nome_etapa)
                    except Exception:
                        pass

                return False

            # Passar par√¢metro primeiro_ciclo apenas para RPA Oracle
            if aceita_primeiro_ciclo:
                sucesso = funcao_etapa(config, primeiro_ciclo=primeiro_ciclo)
            else:
                sucesso = funcao_etapa(config)

            # Atualizar status de etapas espec√≠ficas
            if nome_etapa == "RPA Oracle":
                etapas_status["RPA Oracle"] = "Sucesso" if sucesso else "Falha"
            elif nome_etapa == "RPA Bancada":
                etapas_status["RPA Bancada"] = "Sucesso" if sucesso else "Falha"

            if not sucesso:
                gui_log(f"‚ùå Falha na etapa: {nome_etapa}")

                # Atualizar no Google Sheets
                if GOOGLE_SHEETS_DISPONIVEL:
                    try:
                        data_fim = datetime.now()
                        atualizar_ciclo(_ciclo_atual, "Status", "Falha")
                        atualizar_ciclo(_ciclo_atual, "Data/Hora Fim", data_fim.strftime("%Y-%m-%d %H:%M:%S"))
                        atualizar_ciclo(_ciclo_atual, "Etapa Falha", nome_etapa)
                        atualizar_ciclo(_ciclo_atual, "RPA Oracle", etapas_status["RPA Oracle"])
                        atualizar_ciclo(_ciclo_atual, "RPA Bancada", etapas_status["RPA Bancada"])
                    except Exception:
                        pass

                return False

        # Sucesso!
        data_fim = datetime.now()
        gui_log("=" * 60)
        gui_log(f"‚úÖ CICLO #{_ciclo_atual} CONCLU√çDO COM SUCESSO!")
        gui_log("=" * 60)

        # Atualizar no Google Sheets
        if GOOGLE_SHEETS_DISPONIVEL:
            try:
                atualizar_ciclo(_ciclo_atual, "Status", "Sucesso")
                atualizar_ciclo(_ciclo_atual, "Data/Hora Fim", data_fim.strftime("%Y-%m-%d %H:%M:%S"))
                atualizar_ciclo(_ciclo_atual, "RPA Oracle", etapas_status["RPA Oracle"])
                atualizar_ciclo(_ciclo_atual, "RPA Bancada", etapas_status["RPA Bancada"])

                # Calcular tempo
                delta = data_fim - _data_inicio_ciclo
                minutos = delta.total_seconds() / 60
                atualizar_ciclo(_ciclo_atual, "Tempo Execu√ß√£o (min)", f"{minutos:.2f}")
            except Exception as e:
                gui_log(f"‚ö†Ô∏è Erro ao atualizar Google Sheets: {e}")

        return True

    except Exception as e:
        gui_log(f"‚ùå Erro durante o ciclo: {e}")
        import traceback
        gui_log(traceback.format_exc())

        # Atualizar no Google Sheets
        if GOOGLE_SHEETS_DISPONIVEL:
            try:
                atualizar_ciclo(_ciclo_atual, "Status", "Erro")
                atualizar_ciclo(_ciclo_atual, "Observa√ß√µes", str(e))
            except Exception:
                pass

        return False

# =================== LOOP PRINCIPAL ===================
def main(modo_continuo=True):
    """
    Fun√ß√£o principal - executa em loop cont√≠nuo sem interrup√ß√£o

    Args:
        modo_continuo: Se True, executa em loop cont√≠nuo (padr√£o: True)
    """
    global _rpa_running, _ciclo_atual
    _rpa_running = True

    gui_log("=" * 60)
    gui_log("ü§ñ RPA CICLO - Iniciado")
    if MODO_TESTE:
        gui_log("[MODO TESTE ATIVADO] Simula√ß√£o sem movimentos f√≠sicos - apenas teste de l√≥gica")
    gui_log("=" * 60)

    try:
        config = carregar_config()

        if modo_continuo:
            gui_log("üîÑ Modo cont√≠nuo ativado - execu√ß√£o ininterrupta")
            gui_log("‚ö†Ô∏è O RPA Oracle aguardar√° automaticamente se n√£o houver nada para processar")
            gui_log("üõë Para parar: use o bot√£o PARAR ou mova o mouse para o canto superior esquerdo")
            gui_log("‚ö†Ô∏è IMPORTANTE: RPA ser√° interrompido automaticamente em caso de falha cr√≠tica")
            gui_log("")

            while _rpa_running:
                # Executar ciclo
                sucesso = executar_ciclo_completo(config)

                if sucesso:
                    gui_log("‚úÖ Ciclo conclu√≠do com sucesso! Iniciando pr√≥ximo ciclo...")

                    # Pequena pausa de 5 segundos entre ciclos para estabiliza√ß√£o
                    if not aguardar_com_pausa(5, "Pausa entre ciclos"):
                        break
                else:
                    # FALHA CR√çTICA: Parar imediatamente e avisar usu√°rio
                    gui_log("=" * 60)
                    gui_log("‚ùå FALHA CR√çTICA DETECTADA!")
                    gui_log("=" * 60)
                    gui_log("üõë RPA foi interrompido automaticamente")
                    gui_log("üìã Verifique os logs acima para identificar o problema")
                    gui_log("‚ö†Ô∏è Pode ser:")
                    gui_log("   - Falha ao processar itens no Oracle")
                    gui_log("   - Falha ao executar RPA Bancada")
                    gui_log("   - Problema de conex√£o com Google Sheets")
                    gui_log("   - Erro de coordenadas/cliques")
                    gui_log("=" * 60)
                    break  # PARAR IMEDIATAMENTE

                if not _rpa_running:
                    break
        else:
            gui_log("üéØ Modo execu√ß√£o √∫nica")
            executar_ciclo_completo(config)

    except KeyboardInterrupt:
        gui_log("‚è∏Ô∏è Interrompido pelo usu√°rio (Ctrl+C)")
    except pyautogui.FailSafeException:
        gui_log("üõë FAILSAFE acionado (mouse no canto superior esquerdo)")
    except Exception as e:
        gui_log(f"‚ùå Erro fatal: {e}")
        import traceback
        gui_log(traceback.format_exc())
    finally:
        _rpa_running = False
        gui_log("=" * 60)
        gui_log("üèÅ RPA CICLO - Finalizado")
        gui_log(f"üìä Total de ciclos executados: {_ciclo_atual}")
        gui_log("=" * 60)

# =================== PONTO DE ENTRADA ===================
if __name__ == "__main__":
    # Configurar PyAutoGUI
    pyautogui.PAUSE = 0.5
    pyautogui.FAILSAFE = True

    # Executar RPA em modo cont√≠nuo
    main(modo_continuo=True)
