# -*- coding: utf-8 -*-
"""
RPA CICLO - Automa√ß√£o de Ciclo Completo
Orquestra a execu√ß√£o sequencial de processos no Oracle, incluindo:
- Transfer√™ncia de Subinvent√°rio
- Execu√ß√£o do RPA_Oracle
- Navega√ß√£o e execu√ß√£o do RPA_Bancada
- Repeti√ß√£o autom√°tica com intervalo de 30 minutos
"""

import json
import os
import sys
import time
import subprocess
from pathlib import Path
import pyautogui
import keyboard
import logging
from datetime import datetime

# =================== CONFIGURA√á√ÉO DE LOGS ===================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rpa_ciclo.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# =================== CONFIGURA√á√ïES GLOBAIS ===================
BASE_DIR = Path(__file__).parent.resolve()
CONFIG_FILE = BASE_DIR / "config.json"

# Controle de execu√ß√£o
estado_rpa = {
    "executando": True,
    "ciclo_atual": 0
}

# =================== CARREGAMENTO DE CONFIGURA√á√ÉO ===================
def carregar_config():
    """Carrega as configura√ß√µes do arquivo config.json"""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        logger.info("‚úÖ Configura√ß√µes carregadas com sucesso")
        return config
    except FileNotFoundError:
        logger.error(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {CONFIG_FILE}")
        raise
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Erro ao decodificar JSON: {e}")
        raise

# =================== FUN√á√ïES DE CONTROLE ===================
def verificar_pausa():
    """Verifica se o usu√°rio pressionou ESC para pausar"""
    if keyboard.is_pressed('esc'):
        logger.warning("‚è∏Ô∏è ESC pressionado - Pausando RPA...")
        estado_rpa["executando"] = False
        return True
    return False

def aguardar_com_pausa(segundos, mensagem="Aguardando"):
    """Aguarda um tempo com possibilidade de interrup√ß√£o por ESC"""
    logger.info(f"‚è≥ {mensagem} por {segundos} segundos...")
    inicio = time.time()
    while time.time() - inicio < segundos:
        if verificar_pausa():
            return False
        time.sleep(0.5)
    return True

# =================== FUN√á√ïES DE AUTOMA√á√ÉO ===================
def clicar_coordenada(x, y, duplo=False, descricao=""):
    """Clica em uma coordenada espec√≠fica na tela"""
    if descricao:
        logger.info(f"üñ±Ô∏è {descricao}")
    else:
        logger.info(f"üñ±Ô∏è Clicando em ({x}, {y})")

    pyautogui.moveTo(x, y, duration=0.5)
    time.sleep(0.3)

    if duplo:
        pyautogui.doubleClick()
    else:
        pyautogui.click()

    time.sleep(0.5)

def digitar_texto(texto, pressionar_teclas=None):
    """Digita um texto e opcionalmente pressiona teclas adicionais"""
    logger.info(f"‚å®Ô∏è Digitando: {texto}")
    pyautogui.write(texto)
    time.sleep(0.3)

    if pressionar_teclas:
        for tecla in pressionar_teclas:
            logger.info(f"‚å®Ô∏è Pressionando: {tecla.upper()}")
            pyautogui.press(tecla)
            time.sleep(0.3)

# =================== ETAPAS DO PROCESSO ===================
def etapa_01_transferencia_subinventario(config):
    """Etapa 1: Clicar em Transfer√™ncia de Subinvent√°rio"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 1: Transfer√™ncia de Subinvent√°rio")
    logger.info("="*60)

    coord = config["coordenadas"]["tela_01_transferencia_subinventario"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    return aguardar_com_pausa(tempo_espera, "Aguardando abertura do modal")

def etapa_02_preencher_tipo(config):
    """Etapa 2: Preencher campo Tipo com SUB"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 2: Preenchimento do Tipo")
    logger.info("="*60)

    coord = config["coordenadas"]["tela_02_campo_tipo"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    time.sleep(0.5)
    digitar_texto(coord["digitar"], pressionar_teclas=coord["acoes"])

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando processamento")

def etapa_03_selecionar_funcionario(config):
    """Etapa 3: Selecionar funcion√°rio Wallatas Moreira"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 3: Sele√ß√£o de Funcion√°rio")
    logger.info("="*60)

    # Clicar na pastinha
    coord_pastinha = config["coordenadas"]["tela_03_pastinha_funcionario"]
    clicar_coordenada(coord_pastinha["x"], coord_pastinha["y"], descricao=coord_pastinha["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    if not aguardar_com_pausa(tempo_espera, "Aguardando modal de funcion√°rios"):
        return False

    # Duplo clique em Wallatas Moreira
    coord_wallatas = config["coordenadas"]["tela_04_selecionar_wallatas"]
    clicar_coordenada(
        coord_wallatas["x"],
        coord_wallatas["y"],
        duplo=coord_wallatas.get("duplo_clique", False),
        descricao=coord_wallatas["descricao"]
    )

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando sele√ß√£o")

def etapa_04_confirmar_selecao(config):
    """Etapa 4: Confirmar sele√ß√£o clicando em Sim"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 4: Confirma√ß√£o")
    logger.info("="*60)

    coord = config["coordenadas"]["tela_05_confirmar_sim"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["apos_modal"]
    return aguardar_com_pausa(tempo_espera, "Aguardando confirma√ß√£o")

def etapa_05_executar_rpa_oracle(config):
    """Etapa 5: Executar RPA_Oracle completo"""
    logger.info("\n" + "="*60)
    logger.info("ü§ñ ETAPA 5: Execu√ß√£o do RPA_Oracle")
    logger.info("="*60)

    caminho_oracle = BASE_DIR.parent / "rpa_oracle" / "RPA_Oracle.py"

    if not caminho_oracle.exists():
        logger.error(f"‚ùå RPA_Oracle n√£o encontrado em: {caminho_oracle}")
        return False

    logger.info(f"üìÇ Executando: {caminho_oracle}")

    try:
        # Executar RPA_Oracle como subprocesso
        # Nota: Como o RPA_Oracle tem GUI Tkinter, ele precisa ser executado e controlado manualmente
        # Aqui vamos apenas iniciar o processo e aguardar ele terminar
        logger.warning("‚ö†Ô∏è RPA_Oracle possui interface gr√°fica pr√≥pria")
        logger.warning("‚ö†Ô∏è Por favor, execute o RPA_Oracle manualmente e aguarde sua conclus√£o")
        logger.warning("‚ö†Ô∏è Quando o RPA_Oracle terminar, pressione ENTER para continuar...")

        input()  # Aguarda o usu√°rio pressionar ENTER

        logger.info("‚úÖ Continuando ap√≥s execu√ß√£o do RPA_Oracle")

        tempo_espera = config["tempos_espera"]["apos_rpa_oracle"]
        return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

    except Exception as e:
        logger.error(f"‚ùå Erro ao executar RPA_Oracle: {e}")
        return False

def etapa_06_navegacao_pos_oracle(config):
    """Etapa 6: Navega√ß√£o ap√≥s RPA_Oracle"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 6: Navega√ß√£o p√≥s-Oracle")
    logger.info("="*60)

    # Clicar na janela de navega√ß√£o
    coord = config["coordenadas"]["tela_06_janela_navegador"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    if not aguardar_com_pausa(tempo_espera, "Aguardando janela de navega√ß√£o"):
        return False

    logger.info(f"‚ÑπÔ∏è Verificando op√ß√£o: {config['textos']['navegador_opcao']}")

    # Clicar duplo em "4. Bancada de Material"
    coord_bancada = config["coordenadas"]["tela_07_bancada_material"]
    clicar_coordenada(
        coord_bancada["x"],
        coord_bancada["y"],
        duplo=coord_bancada.get("duplo_clique", False),
        descricao=coord_bancada["descricao"]
    )

    tempo_espera = config["tempos_espera"]["apos_modal"]
    return aguardar_com_pausa(tempo_espera, "Aguardando abertura da Bancada")

def etapa_07_executar_rpa_bancada(config):
    """Etapa 7: Executar RPA_Bancada completo"""
    logger.info("\n" + "="*60)
    logger.info("ü§ñ ETAPA 7: Execu√ß√£o do RPA_Bancada")
    logger.info("="*60)

    caminho_bancada = BASE_DIR.parent / "rpa_bancada" / "main.py"

    if not caminho_bancada.exists():
        logger.error(f"‚ùå RPA_Bancada n√£o encontrado em: {caminho_bancada}")
        return False

    logger.info(f"üìÇ Executando: {caminho_bancada}")

    try:
        # Executar RPA_Bancada como subprocesso
        resultado = subprocess.run(
            [sys.executable, str(caminho_bancada)],
            cwd=str(caminho_bancada.parent),
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        if resultado.returncode == 0:
            logger.info("‚úÖ RPA_Bancada executado com sucesso")
            logger.debug(f"Output: {resultado.stdout}")
        else:
            logger.error(f"‚ùå RPA_Bancada falhou com c√≥digo: {resultado.returncode}")
            logger.error(f"Erro: {resultado.stderr}")
            return False

        tempo_espera = config["tempos_espera"]["apos_rpa_bancada"]
        return aguardar_com_pausa(tempo_espera, "Aguardando estabiliza√ß√£o")

    except Exception as e:
        logger.error(f"‚ùå Erro ao executar RPA_Bancada: {e}")
        return False

def etapa_08_fechar_bancada(config):
    """Etapa 8: Fechar a janela da Bancada"""
    logger.info("\n" + "="*60)
    logger.info("üìã ETAPA 8: Fechamento da Bancada")
    logger.info("="*60)

    coord = config["coordenadas"]["tela_08_fechar_bancada"]
    clicar_coordenada(coord["x"], coord["y"], descricao=coord["descricao"])

    tempo_espera = config["tempos_espera"]["entre_cliques"]
    return aguardar_com_pausa(tempo_espera, "Aguardando fechamento")

# =================== EXECU√á√ÉO DO CICLO COMPLETO ===================
def executar_ciclo_completo(config):
    """Executa um ciclo completo de todas as etapas"""
    estado_rpa["ciclo_atual"] += 1

    logger.info("\n" + "üîÑ"*30)
    logger.info(f"üîÑ INICIANDO CICLO #{estado_rpa['ciclo_atual']}")
    logger.info(f"üïê Hor√°rio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("üîÑ"*30 + "\n")

    try:
        # Executar todas as etapas em sequ√™ncia
        etapas = [
            etapa_01_transferencia_subinventario,
            etapa_02_preencher_tipo,
            etapa_03_selecionar_funcionario,
            etapa_04_confirmar_selecao,
            etapa_05_executar_rpa_oracle,
            etapa_06_navegacao_pos_oracle,
            etapa_07_executar_rpa_bancada,
            etapa_08_fechar_bancada
        ]

        for i, etapa in enumerate(etapas, 1):
            if not estado_rpa["executando"]:
                logger.warning("‚è∏Ô∏è Ciclo interrompido pelo usu√°rio")
                return False

            sucesso = etapa(config)

            if not sucesso:
                logger.error(f"‚ùå Falha na etapa {i}: {etapa.__name__}")
                return False

        logger.info("\n" + "‚úÖ"*30)
        logger.info(f"‚úÖ CICLO #{estado_rpa['ciclo_atual']} CONCLU√çDO COM SUCESSO!")
        logger.info("‚úÖ"*30 + "\n")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erro durante o ciclo: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

# =================== LOOP PRINCIPAL ===================
def main():
    """Fun√ß√£o principal - loop cont√≠nuo do RPA"""
    logger.info("="*60)
    logger.info("ü§ñ RPA CICLO - Iniciado")
    logger.info("="*60)
    logger.info("‚ÑπÔ∏è Pressione ESC a qualquer momento para pausar")
    logger.info("="*60 + "\n")

    try:
        config = carregar_config()

        while estado_rpa["executando"]:
            # Executar ciclo completo
            sucesso = executar_ciclo_completo(config)

            if not sucesso:
                logger.warning("‚ö†Ô∏è Ciclo falhou, mas continuar√° ap√≥s intervalo...")

            if not estado_rpa["executando"]:
                break

            # Aguardar intervalo de 30 minutos antes do pr√≥ximo ciclo
            tempo_ciclo = config["tempos_espera"]["ciclo_completo"]
            minutos = tempo_ciclo / 60

            logger.info("\n" + "‚è∞"*30)
            logger.info(f"‚è∞ Aguardando {minutos:.0f} minutos at√© o pr√≥ximo ciclo...")
            logger.info(f"üïê Pr√≥ximo ciclo em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info("‚è∞"*30 + "\n")

            if not aguardar_com_pausa(tempo_ciclo, f"Intervalo de {minutos:.0f} minutos"):
                break

    except KeyboardInterrupt:
        logger.warning("\n‚è∏Ô∏è Interrompido pelo usu√°rio (Ctrl+C)")
    except Exception as e:
        logger.error(f"\n‚ùå Erro fatal: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        logger.info("\n" + "="*60)
        logger.info("üèÅ RPA CICLO - Finalizado")
        logger.info(f"üìä Total de ciclos executados: {estado_rpa['ciclo_atual']}")
        logger.info("="*60)

# =================== PONTO DE ENTRADA ===================
if __name__ == "__main__":
    # Configurar PyAutoGUI
    pyautogui.PAUSE = 0.5
    pyautogui.FAILSAFE = True

    # Executar RPA
    main()
